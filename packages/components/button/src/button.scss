@import '../../styles/common.scss';

.kl-button {
    outline: none;
    cursor: pointer;
    border: $border-none;
    position: relative;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    box-sizing: border-box;
    min-width: var(--kl-size-width);
    min-height: var(--kl-size-height);
    font-size: var(--kl-size-font);
    user-select: none;
    background-color: var(--kl-bg-color);
    color: var(--kl-font-color);
    border: var(--kl-border);

    & + & {
        margin-left: 12px;
    }

    // transition
    transition: all $transition-quick;

    //circle
    &.kl-circle {
        border-radius: 50%;
        padding: 15px;
        min-width: 20px;
        height: 20px;
    }

    //round
    &.kl-round {
        border-radius: 20px;
    }
    //disabled
    &.kl-disabled {
        cursor: not-allowed;
        opacity: 0.6;
    }
}

$defaultHoverBgColor: null;

@each $key, $value in $typeStyle {
    @if $key == 'primary' {
        $defaultHoverBgColor: map-get(
            $map: $value,
            $key: 'kl-bg'
        );
    }
}

//只有使用了type的才能正确使用plain
//遍历type找到当前匹配的类型
@each $key, $value in $typeStyle {
    .kl-button--#{$key}:not(.kl-disabled) {
        @if $key == 'default' {
            &:hover {
                --kl-border-color: #{rgba($color: $defaultHoverBgColor, $alpha: 0.5)};
                --kl-border: var(--kl-border-width) var(--kl-border-style) var(--kl-border-color);
                --kl-font-color: #{$defaultHoverBgColor};
                --kl-bg-color: #{rgba($color: $defaultHoverBgColor, $alpha: 0.1)};
            }
            &:focus {
                --kl-border-color: #{rgba($color: $defaultHoverBgColor, $alpha: 0.5)};
                --kl-border: var(--kl-border-width) var(--kl-border-style) var(--kl-border-color);
                --kl-font-color: #{$defaultHoverBgColor};
                --kl-bg-color: #{rgba($color: $defaultHoverBgColor, $alpha: 0.1)};
            }
            &:active {
                --kl-border-color: #{rgba($color: $defaultHoverBgColor, $alpha: 1)};
            }
        } @else {
            &:hover {
                opacity: 0.6;
            }

            //激活样式
            &:active {
                opacity: 1 !important;
                @include kl-attribute($value, '--kl-bg-color', 'kl-bg-active');
            }
        }

        &.kl-plain {
            //如果是默认类型，不进行设置
            @if $key == 'default' {
                &:hover,
                &:active {
                    --kl-border-color: #{$defaultHoverBgColor};
                    --kl-font-color: #{$defaultHoverBgColor};
                    --kl-bg-color: #{$default-bgColor};
                }
                &:focus {
                    --kl-border-color: #{$defaultHoverBgColor};
                    --kl-font-color: #{$defaultHoverBgColor};
                    --kl-bg-color: #{$default-bgColor};
                }
            } @else {
                //给背景颜色设置透明度
                --kl-bg-color: #{rgba($color: map-get($map: $value, $key: 'kl-bg'), $alpha: 0.1)};
                //给字体设置当前type主题色
                @include kl-attribute($value, '--kl-font-color', 'kl-bg');
                //增加边框
                --kl-border-color: #{map-get($map: $value, $key: 'kl-bg')};
                --kl-border: var(--kl-border-width) var(--kl-border-style) var(--kl-border-color);

                &:hover {
                    opacity: 1 !important;
                    --kl-bg-color: #{rgba($color: map-get($map: $value, $key: 'kl-bg'), $alpha: 1)};
                    @include kl-attribute($value, '--kl-font-color', 'kl-fontColor');
                }
                &:focus {
                    --kl-font-color: white;
                    --kl-bg-color: #{rgba($color: map-get($map: $value, $key: 'kl-bg'), $alpha: 1)};
                }
                &:active {
                    opacity: 1 !important;
                    @include kl-attribute($value, '--kl-bg-color', 'kl-bg-active');
                    --kl-border-color: #{map-get($map: $value, $key: 'kl-bg-active')};
                }
            }
        }
    }
}
